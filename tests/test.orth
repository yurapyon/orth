{ 0 ~ swap << ~
} :gen-bitmask @

{ #x1 &
} :last-bit @

{ { 1 >> } { last-bit } bi
} :chop-bit @

{ 1 << |
} :append-bit @

{ #xff &
} :last-byte @

{ { 8 >> } { last-byte } bi
} :chop-byte @

{ pick 0 =
  { 2nip }
  { { 1 - }
    { chop-bit }
    { append-bit }
    tri*
    reverse-bits'
  }
  if
} :reverse-bits' @

{ 0 reverse-bits'
} :reverse-bits
"( int-len int -- reversed )"
@doc

{ over 0 =
  { 2nip }
  { over last-bit 1 =
    { { chop-bit }
      { 1 >> swap }
      { append-bit }
      tri*
      bitwise-merge' }
    { { }
      { 1 >> }
      { 1 << }
      tri*
      bitwise-merge' }
    if
  }
  if
} :bitwise-merge' @

{ { nip integer-length }
  { 0 bitwise-merge' }
  2bi
  reverse-bits
} :bitwise-merge
"( value mask -- )"
@doc

{ pick 0 =
  { 2nip }
  { { 1 - }
    { chop-byte }
    { { vpush! } keep }
    tri*
    int>bytes' }
  if
} :int>bytes' @

{ over <vec>,capacity int>bytes' { vreverse! } keep
} :int>bytes
"( n int -- vec )"
@doc

{ pick 0 =
  { 2nip }
  { { { 1 - } keep } 2dip
    ; {
    ;{ }
    ;{ }
    ;tri*
    map' }
  if
} :map' @

{ { dup vlen 1 - swap } dip map'
} :map
"( vec fn -- vec )"
@doc
