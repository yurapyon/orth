{ dup pick >=
  { 3drop }
  { { { eval } keep } 2dip
    1 + do-times' }
  if
} :do-times'
; q do-ct n
@

{ swap 0 do-times'
} :do-times @

{ dup pick >=
  { 3drop }
  { rot> pick
    { { eval } keep } 2dip
    1 + do-times,i' }
  if
} :do-times,i'
; q do-ct n
@

{ swap 0 do-times,i'
} :do-times,i @

{ { <vec>,capacity } keep
  { 2dup vpush! } do-times
  nip
} :<vec>,fill @

; ===

{ #f 256 <vec>,fill
} :<char-table> @

{ { char>int } dip vget
} :char-table.get @

{ { char>int } dip vset!
} :char-table.set! @

; base 64 ===

"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?"
string.iterator vcollect!
:encode-table @

<char-table>
:decode-table @

; build decode table
1 64 count
encode-table vec.iterator
zip
{ pair>stack decode-table char-table.set! }
each!

{ encode-table vget
} :encode @

{ decode-table char-table.get
} :decode @

;

;

{ :char :lock } :cell @record

{ { { cell.lock "[" " " ? } dip display,p }
  { { cell.char }           dip display,p }
  { { cell.lock "]" " " ? } dip display,p }
  2tri
  }
%cell record-type.display-fn!

{ make-cell } :<cell> @

;

{ :x :y } :point @record

{ make-point } :<point> @

{ "(" over display,p
  over point.x over display,p
  ", " over display,p
  over point.y over display,p
  ")" swap display,p
  drop
}
%point record-type.display-fn!

{ 0 0 <point>
} :<point>,zero @

{ swap over
  { { point.x + } keep point.x! }
  { { point.y + } keep point.y! }
  2bi,s
} :point.displace! @

{ :data
  :width
  :height
} :field @record

{ 2dup * #f swap <vec>,fill
  dup vlen
  { #\. #f <cell> swap pick vset! } do-times,i
  rot>
  make-field
} :<field> @

{ { field.width } { field.data } bi
  { * + } dip
  vget
} :field.get
; x y field
@

{ { { point.x } { point.y } bi } dip field.get
} :field.get,point @

{ field.data vec.iterator
  { #f swap cell.lock! } each!
} :field.clear-locks! @

{ pick field.height pick <=
  { 3drop newline }
  { pick field.width over <=
    { newline drop 1 + 0 field.draw' }
    { 3dup flip field.get display
      1 + field.draw' }
    if }
  if
} :field.draw'
; f y x
@

{ 0 0 field.draw'
} :field.draw @

; ==

{ :field
  :opdef-table
  :at
} :ctx @record

{ 0 0 <point> make-ctx
} :<ctx> @

{ { ctx.at } { ctx.field } bi field.get,point
} :ctx.current-cell @

{ { cell.char } { ctx.opdef-table } bi,s char-table.get
} :ctx.get-cell-opdef @

{ over cell.lock
  { 2drop }
  { swap over ctx.get-cell-opdef eval }
  if
} :ctx.process-cell @

{ dup { ctx.at point.y } { ctx.field field.height } bi >=
  { drop }
  { dup { ctx.at point.x } { ctx.field field.width } bi >=
    { dup ctx.at
      { 0               swap point.x! }
      { dup point.y 1 + swap point.y! } bi
      ctx.process!' }
    { dup { ctx.current-cell } { ctx.process-cell } bi
      dup ctx.at dup point.x 1 + swap point.x!
      ctx.process!' }
    if
    }
  if
} :ctx.process!' @

{ { ctx.field field.clear-locks! }
  { ctx.process!' }
  bi
} :ctx.process! @

5 4 <field> :f @

0 0 f field.get
#\$ swap cell.char!
; { #t swap cell.lock! } bi

0 1 f field.get
#\* swap cell.char!
; { #f swap cell.lock! } bi

f field.draw

<char-table> :opds @
{ drop } #\. opds char-table.set!
{ ctx.at display newline } #\$ opds char-table.set!
{ ctx.current-cell
  { #\. swap cell.char! }
  { #t swap cell.lock! } bi
} #\* opds char-table.set!

f opds <ctx> :ctx @

ctx display newline
ctx ctx.process!
f field.draw
